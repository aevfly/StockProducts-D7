<?php

/**
 * Implements hook_menu().
 */
function stockproducts_menu() {
  $items = array();

  // Страница списка товаров
  $items['admin/stockproducts'] = array(
    'title' => 'Stock Products',
    'page callback' => 'stockproducts_list_page',
    'access arguments' => array('access content'),
  );

  // Форма добавления товара
  $items['admin/stockproducts/add'] = array(
    'title' => 'Add Product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stockproducts_add_form'),
    'access arguments' => array('administer stock products'),
  );

  // Обработчик формы добавления товара
  $items['admin/stockproducts/add-submit'] = array(
    'page callback' => 'stockproducts_add_form_submit',
    'access arguments' => array('administer stock products'),
    'type' => MENU_CALLBACK,
  );

  
  $items['stockproducts/delete'] = array(
    'page callback' => 'stockproducts_delete_callback',
    'access arguments' => array('administer stock products'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Page callback for the stock products list page.
 */
function stockproducts_list_page() {
  $header = array('Product', 'SKU', 'Quantity', 'Purchase Price', 'Actions');
  $rows = array();

  // Получение списка товаров из базы данных
  $results = db_query('SELECT n.nid, n.title, p.model, f.entity_id, f.field_stockdata_value
    FROM {node} n
    INNER JOIN {uc_products} p ON n.nid = p.nid
    INNER JOIN {field_data_field_stockdata} f ON n.nid = f.entity_id
    WHERE n.type = :type', array(':type' => 'product'));

  foreach ($results as $result) {
    $node = node_load($result->nid);
    $stock_data = json_decode($result->field_stockdata_value, TRUE);

    $delete_button = array(
      '#type' => 'button',
      '#value' => t('Delete'),
      '#attributes' => array(
        'class' => array('stockproduct-delete-button'),
        'data-entity-id' => $result->entity_id,
        'data-purchase-price' => $stock_data['purchase_price'],
      ),
    );

    $rows[] = array(
      l($node->nid . " " . $node->title  , 'node/' . $node->nid),
      $result->model,
      $stock_data['quantity'],
      $stock_data['purchase_price'],
      drupal_render($delete_button),
    );
  }

    $output = theme('table', array('header' => $header, 'rows' => $rows));

  // Добавление скрипта для обработки кнопок удаления
  $output .= '<script>
    (function ($) {
      $(document).ready(function() {
        $(".stockproduct-delete-button").click(function() {
          var entityId = $(this).data("entity-id");
          var purchasePrice = $(this).data("purchase-price");
          var quantity = prompt("Enter the quantity to delete:");
          if (quantity !== null) {
            stockproducts_delete(entityId, purchasePrice, quantity);
          }
        });
      });

      function stockproducts_delete(entityId, purchasePrice, quantity) {
        // Отправка AJAX-запроса для удаления товара
        console.log(entityId, purchasePrice, quantity);
        $.ajax({
          url: "/stockproducts/delete",
          type: "POST",
          dataType: "json",
          data: {
            entityId: entityId,
            purchase_price: purchasePrice,
            quantity: quantity,
          },
          success: function(response) {
            if (response.success) {
              /*alert("Product data deleted successfully.");*/
              location.reload();
            } else {
              alert("An error occurred while deleting product data.");
            }
          },
          error: function() {
            alert("An error occurred while deleting product data.");
          }
        });  
      }
    })(jQuery);
  </script>';

  return $output;
}

function stockproducts_delete_callback() {
  dsm('$POST');
  dsm($_POST);
  $entityId = $_POST['entityId'];
  $purchase_price = $_POST['purchase_price'];
  $quantity = $_POST['quantity'];
  $stock_key = $entityId . '-' . $purchase_price;
  dsm($stock_key); 
  dsm('end $POST');

  $query = db_select('field_data_field_stockdata', 'f')
    ->fields('f', array('field_stockdata_value', 'delta'))
    ->condition('f.entity_type', 'node')
    ->condition('f.bundle', 'product')
    ->condition('f.entity_id', $entityId)
    ->execute();

  $stock_data = array();
  $updated_stock_data = array();
  
  foreach ($query as $result) {
    $delta = $result->delta;
    $stock_data[$result->delta] = json_decode($result->field_stockdata_value, TRUE);
    if ($stock_data[$delta]['purchase_price'] == $purchase_price) {
      $item_quantity = $stock_data[$delta]['quantity'];

      if ($quantity == $item_quantity) {
        $stock_data[$delta]['quantity'] = -1;
      } else {
        $stock_data[$delta]['quantity'] -= $quantity;
      }

      $updated_stock_data = $stock_data[$delta];
      break; // Найдено совпадение, выходим из цикла
    }
  }
  
  if($stock_data[$delta]['quantity'] == -1){
    // Удаление записи по $entityId и $delta
    db_delete('field_data_field_stockdata')
      ->condition('entity_type', 'node')
      ->condition('bundle', 'product')
      ->condition('entity_id', $entityId)
      ->condition('delta', $delta)
      ->execute();
  }else{
      if (!empty($updated_stock_data)) {
      db_update('field_data_field_stockdata')
        ->fields(array('field_stockdata_value' => json_encode($updated_stock_data)))
        ->condition('entity_type', 'node')
        ->condition('bundle', 'product')
        ->condition('entity_id', $entityId)
        ->condition('delta', $delta)
        ->execute();
    
        drupal_json_output(array('success' => TRUE));
      } else {
        drupal_json_output(array('success' => FALSE));
      }
    }
}



/**
 * Form callback for the add product form.
 */
function stockproducts_add_form($form, &$form_state) {

  $form['node_id'] = array(
    '#type' => 'textfield',
    '#title' => 'Node ID',
    '#required' => TRUE,
  );

  $form['quantity'] = array(
    '#type' => 'textfield',
    '#title' => 'Quantity',
    '#required' => TRUE,
  );

  $form['purchase_price'] = array(
    '#type' => 'textfield',
    '#title' => 'Purchase Price',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add',
  );

  return $form;
}

/**
 * Form submit callback for the add product form.
 */
function stockproducts_add_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $nodeId = $values['node_id'];
  $values['type'] = 'product';

  // Поиск товара 
    $product = db_query("SELECT p.nid FROM {node} p WHERE p.nid = :node_id AND p.type = :type", array(':node_id' => $nodeId, ':type' => $values['type']))->fetchField();



  if (!$product) {
    drupal_set_message('A product with the specified SKU does not exist.', 'error');
  } else {
    // Создание данных о запасах
    $stock_data = array(
      'quantity' => $values['quantity'],
      'purchase_price' => $values['purchase_price'],
    );

    // Сериализация данных о запасах
    $stock_data_json = json_encode($stock_data);
    
    // Поиск существующих данных о запасах для данного товара
    $existing_stock_data = db_query("SELECT delta, field_stockdata_value FROM {field_data_field_stockdata} WHERE entity_type = :entity_type AND bundle = :bundle AND entity_id = :entity_id", array(
      ':entity_type' => 'node',
      ':bundle' => 'product',
      ':entity_id' => $product,
    ))->fetchAllKeyed(0, 1);

    // Проверка наличия записей о запасах с той же ценой
    $matching_price_deltas = array();
    foreach ($existing_stock_data as $delta => $data) {
      $existing_data = json_decode($data, TRUE);
      if ($existing_data['purchase_price'] == $values['purchase_price']) {
        $matching_price_deltas[] = $delta;
      }
    }

    if (!empty($matching_price_deltas)) {
      // Если есть записи с той же ценой, добавляем новое количество
      foreach ($matching_price_deltas as $delta) {
        $existing_data = json_decode($existing_stock_data[$delta], TRUE);
        $existing_data['quantity'] += $values['quantity'];
        $existing_stock_data[$delta] = json_encode($existing_data);
      }

      // Обновляем существующие записи с новыми данными
      foreach ($existing_stock_data as $delta => $data) {
        db_update('field_data_field_stockdata')
          ->fields(array(
            'field_stockdata_value' => $data,
          ))
          ->condition('entity_type', 'node')
          ->condition('bundle', 'product')
          ->condition('entity_id', $product)
          ->condition('delta', $delta)
          ->execute();
      }
    } else {
      // Если нет записей с той же ценой, добавляем новую запись
      $max_delta = max(array_keys($existing_stock_data));

      db_insert('field_data_field_stockdata')
        ->fields(array(
          'entity_type' => 'node',
          'bundle' => 'product',
          'entity_id' => $product,
          'revision_id' => $product,
          'delta' => $max_delta + 1,
          'field_stockdata_value' => $stock_data_json,
        ))
        ->execute();
    }

    drupal_set_message('Quantity for the product added successfully.');
  }

  $form_state['redirect'] = 'admin/stockproducts';
}


/**
 * Implements hook_permission().
 */
function stockproducts_permission() {
  return array(
    'administer stock products' => array(
      'title' => 'Administer Stock Products',
      'description' => 'Perform administration tasks for stock products.',
    ),
  );
}
